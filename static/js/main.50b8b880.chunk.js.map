{"version":3,"sources":["bomb.png","Cell.js","DummyCell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","cellType","type","clickType","bind","assertThisInitialized","e","ct","preventDefault","window","event","which","button","newCellType","console","log","updateBomb","updateCellCount","setState","_this2","_this$state","react_default","a","createElement","className","onContextMenu","onClick","explodeBomb","id","src","bomb","alt","Component","DummyCell","i","j","click","Board","grid_size","grid","bomb_count","cell_count","lost","won","first_click","first_i","first_j","updateBombCount","checkWin","neighbors","generateBoard","fakeBoard","createBoard","dlt","vi","vj","di","dj","ii","jj","visibleChain","arr","d","push","click_i","click_j","n","count","table","Array","neigh","_loop","_loop2","filter","length","values","Math","floor","random","generateBomb","nxt","it","_this$state2","tp","src_Cell","src_DummyCell","class","align","App","src_Board","href","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50b8b880.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.4ed764ee.png\";","import React, {Component} from 'react'\n\nimport './cell.css'\nimport bomb from './bomb.png'\n\nconst init = 0\nconst flagged = 3\nconst visible = 1\n\nclass Cell extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: this.props.value,\n            cellType: this.props.type\n        }\n\n        this.clickType = this.clickType.bind(this)\n    }\n    \n    clickType(e) {\n        e.preventDefault();\n        \n        var ct;\n        e = e || window.event;\n\n        if (\"which\" in e)  // Gecko (Firefox), WebKit (Safari/Chrome) & Opera\n            ct = e.which;\n        else if (\"button\" in e)  // IE, Opera \n            ct = e.button;\n\n        let newCellType = ct + 1;\n        \n        console.log(newCellType, this.state.cellType)\n        if(newCellType === flagged && this.state.cellType === flagged){\n            newCellType = init;\n        }\n\n        // Flagging bomb\n        if(this.state.cellType === init && newCellType === flagged)\n            this.props.updateBomb(-1)\n        // Unflagging bomb\n        if(this.state.cellType === flagged && newCellType === init)\n            this.props.updateBomb(1)\n\n        if(newCellType === visible){\n\t\t\tif(this.state.cellType === flagged)\n\t\t\t\tthis.props.updateBomb(1)\n            this.props.updateCellCount()\n\t\t}\n\n        this.setState({ cellType: newCellType })\n    } \n\n    render() {\n        const {value, cellType} = this.state\n\n        if (cellType === init)\n            return <button className=\"cell\" onContextMenu={(event) => this.clickType(event)} onClick={(event) => this.clickType(event)} > </button>\n        else if(cellType === visible){\n            if(value === -1){\n                this.props.explodeBomb();\n                return <div id=\"div-bomb\"><img src={bomb} alt=\"bomb\" /> </div>\n            }\n\n            else\n                return <button className=\"cell-clicked\"> {value} </button>\n        }\n        else\n            return <button className=\"cell-flagged\" onContextMenu={(event) => this.clickType(event)} onClick={(event) => this.clickType(event)}> </button>\n    }\n}\n\nexport default Cell\n","import React, {Component} from 'react'\n\nimport './cell.css'\n\nclass DummyCell extends Component {\n    render() {\n        let i = this.props.i\n        let j = this.props.j\n        return <button className=\"cell\" onClick={() => this.props.click(i, j)} > </button>\n    }\n}\n\nexport default DummyCell\n","import React, {Component} from 'react'\nimport Cell from './Cell.js'\nimport DummyCell from './DummyCell.js'\nimport './board.css'\n\nfunction generateBomb(){\n    let values = [0, 0, 0, 0, 0, 0, -1]; // 1/7 chance de criar bomba\n    var idx = Math.floor(Math.random()*values.length);\n    return values[idx];\n}\n\n\nclass Board extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            grid_size: 8,\n            grid: [],\n            bomb_count: 0,\n            cell_count: 0,\n            lost: false,\n            won: false,\n            first_click: true,\n            first_i: 0,\n            first_j: 0\n        }\n\n        this.updateBombCount = this.updateBombCount.bind(this)\n        this.explodeBomb = this.explodeBomb.bind(this)\n        this.updateCellCount = this.updateCellCount.bind(this)\n        this.checkWin = this.checkWin.bind(this)\n        this.neighbors = this.neighbors.bind(this)\n        this.generateBoard = this.generateBoard.bind(this)\n        this.fakeBoard = this.fakeBoard.bind(this)\n        this.createBoard = this.createBoard.bind(this)\n    }\n\n    updateBombCount(dlt){\n        this.setState({bomb_count: this.state.bomb_count+dlt}, this.checkWin)\n    }\n\n    explodeBomb(){\n        if(this.state.lost === false)\n            this.setState({ lost: true })\n    }\n\n    updateCellCount(){\n       this.setState({cell_count: this.state.cell_count-1}, this.checkWin) \n    }\n\n    checkWin(){\n        if(this.state.lost === false && this.state.won === false && this.state.cell_count === 0 && this.state.bomb_count === 0)\n            this.setState({won: true})\n    }\n\n    visibleChain(i, j){\n        // Make callback, make it uncover other cells\n        let {grid, grid_size} = this.state;\n        if(grid[i][j] !== 0) return;\n\n        console.log(\"Uncover \", i, j) \n\n        let vi = [1, -1, 0, 0, -1, 1, -1, 1];\n        let vj = [0, 0, -1, 1, 1, 1, -1, -1];\n        for(let di=0;di<8;di++){\n            for(let dj=0;dj<8;dj++){\n                let ii = i + vi[di], jj = j + vj[dj]\n                if(ii >= 0 && jj >= 0 && ii < grid_size && jj < grid_size){\n                    this.visibleChain(ii, jj)\n                }\n            }\n        }\n    }\n\n    neighbors(i, j){\n        let arr = [], {grid_size} = this.state\n\n        let vi = [1, -1, 0, 0, -1, 1, -1, 1];\n        let vj = [0, 0, -1, 1, 1, 1, -1, -1];\n        for(let d=0;d<8;d++){\n            let ii = i + vi[d]\n            let jj = j + vj[d]\n\n            if(ii < 0 || jj < 0 || ii >= grid_size || jj >= grid_size)\n                continue\n            arr.push({i:ii, j:jj})\n        }\n        return arr;\n    }\n\n    generateBoard(click_i, click_j){\n        let n = this.state.grid_size, count = 0;\n        let table = new Array(n);\n    \t//console.log(\"GenerateBoard\", click_i, click_j)\n        let neigh = this.neighbors(click_i, click_j)\n        neigh.push({i:click_i, j:click_j})\n        //console.log(\"neigh\", neigh)\n        for (let i = 0;i < n;i++){\n            table[i] = new Array(n);\n            for (let j = 0;j < n;j++){\n                if(neigh.filter(e => e.i === i && e.j === j).length > 0){\n                    console.log(\"Neight \", i, j)\n                    table[i][j] = 0;\n                }\n                else\n                    table[i][j] = generateBomb();\n                count += (table[i][j] === -1)\n            }\n        }\n\n        for (let i = 0;i < n;i++){\n            for (let j = 0;j < n;j++){\n                if(table[i][j] === 0){\n                    let nxt = this.neighbors(i, j)\n                    for(let it = 0;it < nxt.length;it++){\n                        let p = nxt[it]\n                        table[i][j] += (table[p.i][p.j] === -1);\n                    }\n                }\n            }\n        }\n        this.setState(\n            {first_click: false, first_i: click_i, first_j: click_j, grid: table, bomb_count: count, cell_count: n*n - count-1}\n        )\n    }\n\n    createBoard() {\n        let table = []\n        let {grid_size, grid} = this.state;\n        console.log(\"grid\", grid)\n        for (let i = 0; i < grid_size; i++) {\n            for(let j = 0;j < grid_size;j++){\n                let tp = 0\n                if(this.state.first_i === i && this.state.first_j === j)\n                    tp = 1\n                table.push(\n                    <Cell type={tp} value={grid[i][j]} updateCellCount={this.updateCellCount} updateBomb={this.updateBombCount} explodeBomb={this.explodeBomb}/>\n                )\n            }\n        }\n        return table\n    }\n\n\n    fakeBoard() {\n        let table = []\n        let {grid_size} = this.state;\n        for (let i = 0; i < grid_size; i++) {\n            for(let j = 0;j < grid_size;j++){\n                table.push(\n                    <DummyCell click={this.generateBoard} i={i} j={j} />\n                )\n            }\n        }\n        return table\n    }\n\n    render() {\n        return (\n            <div> \n                {!this.state.first_click && <h4 class='text-right'> Bombs left: {this.state.bomb_count} </h4>}\n                {this.state.lost && \n                    <h1 align=\"center\" id=\"youLost\"> You lost! </h1>\n                }\n                {this.state.won && \n                    <h1 align=\"center\" id=\"youWon\"> You Won! </h1>\n                }\n                <div className={\"grid-\"+((this.state.lost || this.state.won) ? \"disabled\" : \"container\")}>\n                    {this.state.first_click ?\n                        this.fakeBoard()\n                        :\n                        this.createBoard()\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Board\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board.js';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div class='container'>\n        <h1 class='text-center'> Minesweeper </h1>\n        <Board />\n\t\t<div class='d-inline text-center'>\n\t\t\t<a class='btn btn-outline-danger' href='/'> RESTART </a>\n\t\t</div>\n\n\t\t<h3 class='mt-5'> Rules: </h3>\n\t\t<p>\n\t\t\tClicking with the left mouse button reveals the content of a unclicked cell.\n\t\t</p>\n\t\t<p>\n\t\t\tUsing the right mouse button <span class='flag'> flags </span> a cell as a potential bomb. It is possible to unflag a cell by clicking on it \t\n\t\t</p>\n\t\t<p>\n\t\t\tIn order to win the game you must reveal all <span class='safe'> safe </span> cells and <span class='flag'> flag </span> all cells containing bombs.\n\n\t\t</p>\n\n\t\t<p>\n\t\t\tThe map is generated randomly at the moment you make your first click.\n\t\t\tDon't panic, your first click is always safe!\n\t\t</p>\n\n\t\t<p>\n\t\t\tGood Luck!\n\t\t</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}